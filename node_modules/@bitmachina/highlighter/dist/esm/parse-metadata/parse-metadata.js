import rangeParser from "parse-numeric-range";
/**
 * Parse Markdown code fence metadata.
 *
 * @param metastring - Code block metadata string.
 * @returns Parsed metadata values object.
 * @public
 */
export function parseMetadata(metastring) {
    var _a, _b, _c, _d, _e;
    if (metastring === undefined) {
        return { lineNumbers: [], lineNumbersStart: 1, showLineNumbers: false };
    }
    const titleMatch = metastring === null || metastring === void 0 ? void 0 : metastring.match(/title="(.+)"/);
    const title = (_a = titleMatch === null || titleMatch === void 0 ? void 0 : titleMatch[1]) !== null && _a !== void 0 ? _a : undefined;
    // full title string `title="..."`
    const titleString = (_b = titleMatch === null || titleMatch === void 0 ? void 0 : titleMatch[0]) !== null && _b !== void 0 ? _b : "";
    const metaWithoutTitle = metastring === null || metastring === void 0 ? void 0 : metastring.replace(titleString, "");
    const lineNumbers = metastring ? rangeParser((_d = (_c = metaWithoutTitle.match(/{(.*)}/)) === null || _c === void 0 ? void 0 : _c[1]) !== null && _d !== void 0 ? _d : "") : [];
    const showLineNumbers = /srebmuNeniLwohs(?!(.*)(\/))/.test(reverseString(metastring));
    const lineNumbersStartAtMatch = (_e = reverseString(metastring)) === null || _e === void 0 ? void 0 : _e.match(/(?:\}(\d+){)?srebmuNeniLwohs(?!(.*)(\/))/);
    const lineNumbersStart = (lineNumbersStartAtMatch === null || lineNumbersStartAtMatch === void 0 ? void 0 : lineNumbersStartAtMatch[1])
        ? parseInt(reverseString(lineNumbersStartAtMatch[1]))
        : 1;
    return { lineNumbers, lineNumbersStart, showLineNumbers, title };
}
function reverseString(s) {
    return s === null || s === void 0 ? void 0 : s.split("").reverse().join("");
}
//# sourceMappingURL=parse-metadata.js.map